[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Causal Inference Perspective on Therapist Effects—Online Supplement",
    "section": "",
    "text": "This online supplement for A Causal Inference Perspective on Therapist Effects (Magnusson, 2023, in preparation) contains the code for all calculations, simulations, and figures presented in the article.\n\nPreprint\nGitHub repository\nOSF repository\nInteractive visualization\n\n\nknitr::opts_chunk$set(\n    message = FALSE,\n    warning = FALSE,\n    cache = TRUE\n)\n\n\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(powerlmm)\nlibrary(knitr)\nlibrary(parallel)\nlibrary(lme4)\nlibrary(lmerTest)\nlibrary(svglite)\nlibrary(brms)\nlibrary(parallel)"
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "A Causal Inference Perspective on Therapist Effects—Online Supplement",
    "section": "",
    "text": "This online supplement for A Causal Inference Perspective on Therapist Effects (Magnusson, 2023, in preparation) contains the code for all calculations, simulations, and figures presented in the article.\n\nPreprint\nGitHub repository\nOSF repository\nInteractive visualization\n\n\nknitr::opts_chunk$set(\n    message = FALSE,\n    warning = FALSE,\n    cache = TRUE\n)\n\n\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(powerlmm)\nlibrary(knitr)\nlibrary(parallel)\nlibrary(lme4)\nlibrary(lmerTest)\nlibrary(svglite)\nlibrary(brms)\nlibrary(parallel)"
  },
  {
    "objectID": "index.html#therapist-outcome-confounding-simulation",
    "href": "index.html#therapist-outcome-confounding-simulation",
    "title": "A Causal Inference Perspective on Therapist Effects—Online Supplement",
    "section": "Therapist-Outcome Confounding Simulation",
    "text": "Therapist-Outcome Confounding Simulation\nThe functions below were used to simulate a data set with therapist effects and a therapist-outcome confounder.\n\n#' Get the mean difference between prognostic groups\n#' \n#' @param sd the SD added to the therapist level due to the confounder\n#' @param n2 the number of patients per therapist\n#' \n#' @returns the mean difference between the two binary groups\n#' @examples\n#' n2 &lt;- 50\n#' M &lt;- solve_for_mean(0.075, n2)\n#' # we solve for M in this\n#' sd(c(rep(0, n2), rep(M, n2)))\nsolve_for_mean &lt;- function(sd, n2) {\n    2 * sqrt(sd^2 * (n2 * 2 - 1) / (n2 * 2))\n}\n\n#' Get the therapist SD from the ICC\n#' \n#' @param icc the ICC\n#' @param sd_error the error SD\n#' \n#' @returns the random therapist SD\nget_therapist_sd_from_icc &lt;- function(icc, sd_error) {\n    (sqrt(icc) * sd_error) / (sqrt(1 - icc))\n}\n\n#' Simulate confounded therapist effects \n#' \n#' @param n1 the number of patients per therapist\n#' @param n2 the number of therapists per treatment group\n#' @param sd_therapist the random therapist SD\n#' @param sd_therapist_confounding the SD added to sd_therapist due to confounding\n#' @param sd_error the random error SD\n#' @param ATE average treatment effect\n#' \n#' @returns a data.frame\nsimulate_therapist_effect_confounding &lt;- function(\n    n1,\n    n2,\n    sd_therapist,\n    sd_therapist_confounding,\n    sd_error,\n    ATE,\n    ...) {\n    tot_n &lt;- 2 * n1 * n2\n    b_pre_prognosis &lt;- solve_for_mean(\n        sd = sd_therapist_confounding, \n        n2 = n2\n    )\n    Z &lt;- rep(c(0, 1), each = n1 * n2)\n    therapist_cc &lt;- 1:n2\n    therapist_tx &lt;- (n2 + 1):(n2 * 2)\n    therapist_effect_cc &lt;- rnorm(n2, 0, sd_therapist)\n    therapist_effect_tx &lt;- rnorm(n2, 0, sd_therapist)\n    therapist_effects &lt;- c(therapist_effect_cc, therapist_effect_tx)\n    error &lt;- rnorm(tot_n, 0, sd_error)\n    d &lt;- data.frame(\n        Z,\n        pre_prognosis = rbinom(tot_n, 1, 0.5),\n        therapist = NA,\n        therapist_random = NA\n    )\n    d$therapist &lt;- ifelse(\n        Z == 0,\n        # control\n        ifelse(\n            d$pre_prognosis == 0,\n            sample(\n                x = 1:(n2 / 2),\n                size = n1 * n2 / 2,\n                replace = TRUE\n            ),\n            sample(\n                x = (n2 / 2 + 1):(n2),\n                size = n1 * n2 / 2,\n                replace = TRUE\n            )\n        ),\n        # treatment\n        ifelse(\n            d$pre_prognosis == 0,\n            sample(\n                x = 1:(n2 / 2),\n                size = n1 * n2 / 2,\n                replace = TRUE\n            ),\n            sample(\n                x = (n2 / 2 + 1):(n2),\n                size = n1 * n2 / 2,\n                replace = TRUE\n            )\n        ) + n2\n    )\n    d$therapist_random[d$Z == 0] &lt;- sample(\n        x = therapist_cc,\n        size = n1 * n2,\n        replace = TRUE\n    )\n    d$therapist_random[d$Z == 1] &lt;- sample(\n        x = therapist_tx,\n        size = n1 * n2,\n        replace = TRUE\n    )\n    # non-random allocation of therapists\n    d$therapist_effect &lt;- therapist_effects[d$therapist]\n    d$y &lt;- 10 + \n        d$Z * ATE + \n        d$therapist_effect + \n        error + \n        d$pre_prognosis * b_pre_prognosis\n    # random allocation of therapists\n    d$therapist_effect_random &lt;- therapist_effects[d$therapist_random]\n    d$y_random &lt;- 10 + \n        d$Z * ATE + \n        d$therapist_effect_random + \n        error + \n        d$pre_prognosis * b_pre_prognosis\n    # required by powerlmm\n    d$time &lt;- 0\n    \n    d\n}\n\nTo run the simulation, we pass the simulation function simulate_therapist_effect_confounding and use a custom powerlmm model to set up all the parameters.\n\nds &lt;- study_design(custom = TRUE)\nICC &lt;- 0.05\nsd_error &lt;- 1.5\nsd_therapist &lt;- sqrt((ICC * sd_error^2) / (1 - ICC))\n# check ICC\nsd_therapist^2 / (sd_therapist^2 + sd_error^2)\n\n[1] 0.05\n\np &lt;- powerlmm:::study_parameters.plcp_design_custom(\n    design = ds,\n    n1 = 20,\n    n2 = 10,\n    sd_therapist = sd_therapist,\n    sd_error = sd_error,\n    ATE = 0,\n    data_gen = simulate_therapist_effect_confounding\n)\np$sd_therapist_confounding &lt;- get_therapist_sd_from_icc(\n    icc = 0.075, \n    sd_error = p$sd_error\n)\n# sd within groups\ntot_sd &lt;- sqrt(\n    p$sd_error^2 + p$sd_therapist^2 + p$sd_therapist_confounding^2\n)\n# Cohen's d = 0.5\np$ATE &lt;- 0.5 * tot_sd\np$tot_n &lt;- 2 * p$n1 * p$n2\np$df &lt;- 2 * p$n2 - 2\n\nTrue parameter values\n\np$thetas_FE &lt;- list(\n    \"(Intercept)\" = 10,\n    \"Z\" = p$ATE\n)\np$thetas_RE &lt;- list(\n    \"therapist_(Intercept)\" = p$sd_therapist^2,\n    \"therapist_random_(Intercept)\" = p$sd_therapist^2,\n    \"error\" = p$sd_error^2\n)\n\nWe then specify the statistical models.\n\nf0 &lt;- sim_formula(\n    \"y_random ~ Z + (1 | therapist_random)\", \n    test = \"Z\"\n)\nf1 &lt;- sim_formula(\n    \"y_random ~ Z + pre_prognosis + (1 | therapist_random)\", \n    test = \"Z\"\n)\nf2 &lt;- sim_formula(\n    \"y ~ Z + (1 | therapist)\",\n    test = \"Z\"\n)\nf3 &lt;- sim_formula(\n    \"y ~ Z + pre_prognosis + (1 | therapist)\", \n    test = \"Z\"\n)\nf4 &lt;- sim_formula(\n    \"y ~ Z\", \n    test = \"Z\"\n)\nf5 &lt;- sim_formula(\n    \"y ~ Z + pre_prognosis\", \n    test = \"Z\"\n)\nf &lt;- sim_formula_compare(\n    \"rand\" = f0,\n    \"rand_adj\" = f1,\n    \"confounding\" = f2,\n    \"adjusted\" = f3,\n    \"ignored\" = f4,\n    \"ignored_adjusted\" = f5\n)\n\nFinally, we run the simulation and save the results.\n\n# Load cache if it exists\nfile_path &lt;- \"tmp/simulation.rds\"\nif (file.exists(file_path)) {\n    res &lt;- read_rds(file = file_path)\n} else {\n    MAX_CORES &lt;- as.numeric(Sys.getenv(\"MAX_CORES\"))\n    N_SIM &lt;- as.numeric(Sys.getenv(\"N_SIM\"))\n    if (is.na(MAX_CORES)) MAX_CORES &lt;- parallel::detectCores(logical = FALSE) - 1\n    cl &lt;- makeCluster(MAX_CORES)\n    clusterExport(\n        cl, \n        c(\n            \"solve_for_mean\", \n            \"get_therapist_sd_from_icc\"\n        )\n    )\n    res &lt;- simulate(\n        p,\n        nsim = ifelse(is.na(N_SIM), 10000, N_SIM),\n        cores = MAX_CORES,\n        formula = f,\n        cl = cl,\n        satterthwaite = TRUE\n    )\n    stopCluster(cl)\n    write_rds(\n        res,\n        file = file_path,\n        compress = \"gz\"\n    )\n}\n\nNumber of simulations: 10^{4}\n\nSimulations results\nWe first summarize the treatment effects, and the result is shown in Table 1.\n\nsummary(\n    res,\n    verbose = FALSE,\n    para = \"Z\"\n)$summary$summary$FE %&gt;%\n    mutate(\n        SD_rel_bias = (M_se - SD_est) / SD_est\n    ) %&gt;%\n    relocate(model, .before = 1) %&gt;% \n    select(\n        -parameter, \n        -Power, \n        -Power_bw,\n        \"Model\" = model,\n        \"Estimate\" = M_est,\n        \"Rel. bias (SE)\" = SD_rel_bias,\n        \"SD(Est.)\" = SD_est,\n        \"Power\" = Power_satt,\n        \"True\" = theta\n    ) %&gt;% \n    kable(digits = 2)\n\n\n\nTable 1: Simulation results (treatment effects)\n\n\n\n\n\n\n\n\n\n\n\n\n\nModel\nEstimate\nTrue\nM_se\nSD(Est.)\nPower\nRel. bias (SE)\n\n\n\n\n2\nrand\n0.8\n0.8\n0.22\n0.22\n0.93\n0.00\n\n\n21\nrand_adj\n0.8\n0.8\n0.21\n0.21\n0.94\n0.00\n\n\n22\nconfounding\n0.8\n0.8\n0.29\n0.21\n0.80\n0.35\n\n\n23\nadjusted\n0.8\n0.8\n0.21\n0.21\n0.94\n0.00\n\n\n24\nignored\n0.8\n0.8\n0.16\n0.22\n0.99\n-0.28\n\n\n25\nignored_adjusted\n0.8\n0.8\n0.15\n0.22\n0.99\n-0.29\n\n\n\n\n\n\nA summary of the estimated ICCs is shown in Table 2.\n\nlapply(\n    seq_along(res$res), \n    function(i) {\n        res$res[[i]]$RE %&gt;% \n            group_by(sim) %&gt;% \n            summarize(ICC = vcov[1] / sum(vcov)) %&gt;% \n            ungroup() %&gt;% \n            summarize(\n                est_mean = mean(ICC), \n                est_sd = sd(ICC), \n                est_lwr = quantile(ICC, 0.025), \n                est_upr = quantile(ICC, 0.975)\n            ) %&gt;% \n            ungroup() %&gt;% \n            mutate(\n                model = names(res$res)[[i]],\n                parameter = \"ICC\",\n                .before = 1\n            )\n    }\n) %&gt;% \n    bind_rows() %&gt;% \n    filter(grepl(\"ignored\", model) == FALSE) %&gt;% \n    mutate(\n        theta = p$sd_therapist^2 / (p$sd_therapist^2 + p$sd_error^2),\n        rel_bias = (est_mean - theta) / theta\n    ) %&gt;% \n    select(\n        \"Model\" = model,\n        \"Parameter\" = parameter,\n        \"Estimate\" = est_mean,\n        \"Rel. bias\" = rel_bias,\n        \"SD(Est.)\" = est_sd,\n        \"Est. (2.5%)\" = est_lwr,\n        \"Est. (97.5%)\" = est_upr,\n        \"True\" = theta\n    ) %&gt;% \n    kable(digits = 2)\n\n\n\nTable 2: Simulation results (ICCs)\n\n\n\n\n\n\n\n\n\n\n\n\nModel\nParameter\nEstimate\nRel. bias\nSD(Est.)\nEst. (2.5%)\nEst. (97.5%)\nTrue\n\n\n\n\nrand\nICC\n0.05\n-0.07\n0.03\n0.00\n0.11\n0.05\n\n\nrand_adj\nICC\n0.05\n0.00\n0.03\n0.00\n0.12\n0.05\n\n\nconfounding\nICC\n0.12\n1.39\n0.04\n0.04\n0.21\n0.05\n\n\nadjusted\nICC\n0.05\n-0.01\n0.03\n0.00\n0.12\n0.05\n\n\n\n\n\n\nLastly, we summarize the variance components.\n\nlapply(\n    seq_along(res$res), \n    function(i) {\n        res$res[[i]]$RE %&gt;%\n            group_by(parameter) %&gt;%\n            summarize(\n                est_mean = mean(vcov),\n                est_sd = sd(vcov),\n                est_lwr = quantile(vcov, 0.025),\n                est_upr = quantile(vcov, 0.975)\n            ) %&gt;%\n            ungroup() %&gt;%\n            mutate(\n                model = names(res$res)[[i]],\n                .before = 1\n            )\n    }\n) %&gt;%\n    bind_rows() %&gt;%\n    left_join(\n        data.frame(\n            parameter = names(p$thetas_RE),\n            theta = unlist(p$thetas_RE)\n        )\n    ) %&gt;%\n    mutate(\n        parameter = replace(\n            parameter, \n            grep(\"therapist\", parameter), \n            \"therapist\"\n        ),\n        theta = case_when(\n            parameter == \"therapist\" ~ p$sd_therapist^2,\n            parameter == \"error\" & model == \"rand\" ~ p$sd_error^2 + \n                p$sd_therapist_confounding^2,\n            model == \"ignored\" ~ p$sd_error^2 +  p$sd_therapist^2 + \n                p$sd_therapist_confounding^2,\n            model == \"ignored_adjusted\" ~ p$sd_error^2 + p$sd_therapist^2,\n            parameter == \"error\" ~ p$sd_error^2\n        ),\n        rel_bias = (est_mean - theta) / theta\n    ) %&gt;% \n    select(\n        \"Model\" = model,\n        \"Parameter\" = parameter,\n        \"Estimate\" = est_mean,\n        \"Rel. bias\" = rel_bias,\n        \"SD(Est.)\" = est_sd,\n        \"Est. (2.5%)\" = est_lwr,\n        \"Est. (97.5%)\" = est_upr,\n        \"True\" = theta\n    ) %&gt;% \n    kable(digits = 2)\n\n\n\nTable 3: Simulation results (variance components)\n\n\n\n\n\n\n\n\n\n\n\n\nModel\nParameter\nEstimate\nRel. bias\nSD(Est.)\nEst. (2.5%)\nEst. (97.5%)\nTrue\n\n\n\n\nrand\nerror\n2.42\n0.00\n0.18\n2.08\n2.78\n2.43\n\n\nrand\ntherapist\n0.12\n0.01\n0.08\n0.00\n0.30\n0.12\n\n\nrand_adj\nerror\n2.25\n0.00\n0.16\n1.93\n2.58\n2.25\n\n\nrand_adj\ntherapist\n0.12\n0.01\n0.08\n0.00\n0.30\n0.12\n\n\nconfounding\nerror\n2.25\n0.00\n0.17\n1.93\n2.58\n2.25\n\n\nconfounding\ntherapist\n0.31\n1.61\n0.13\n0.10\n0.59\n0.12\n\n\nadjusted\nerror\n2.25\n0.00\n0.17\n1.93\n2.58\n2.25\n\n\nadjusted\ntherapist\n0.12\n0.00\n0.08\n0.00\n0.30\n0.12\n\n\nignored\nerror\n2.53\n-0.01\n0.19\n2.16\n2.93\n2.55\n\n\nignored_adjusted\nerror\n2.35\n-0.01\n0.17\n2.03\n2.70\n2.37"
  },
  {
    "objectID": "index.html#a-more-intuitive-interpretation-of-therapist-effects",
    "href": "index.html#a-more-intuitive-interpretation-of-therapist-effects",
    "title": "A Causal Inference Perspective on Therapist Effects—Online Supplement",
    "section": "A More Intuitive Interpretation of Therapist Effects",
    "text": "A More Intuitive Interpretation of Therapist Effects\nThis section presents R code for calculating the overlap measures presented in the manuscript.\n\nCalculate the overlap between therapist distributions\nOverlap can be calculated using the examples presented below, and several equivalent parameterizations are shown, using both standardized and raw effect sizes.\n\n# Integration\nint_f &lt;- function(x, mu1, mu2, sd1, sd2) {\n    f1 &lt;- dnorm(x, mean = mu1, sd = sd1)\n    f2 &lt;- dnorm(x, mean = mu2, sd = sd2)\n    pmin(f1, f2)\n}\ncohensd &lt;- 0.2\ntot_sd &lt;- sqrt(p$sd_therapist^2 + p$sd_error^2)\nATE &lt;- cohensd * tot_sd\n# standardize using therapist SD\nz &lt;- ATE / p$sd_therapist\n2 * pnorm(-abs(z) / 2)\n\n[1] 0.6547208\n\n# unstandardized\n2 * pnorm(\n    -abs(ATE) / 2, \n    sd = p$sd_therapist\n)\n\n[1] 0.6547208\n\n# Integrate unstandardized\nintegrate(\n    int_f,\n    -Inf,\n    Inf,\n    mu1 = 0,\n    mu2 = ATE,\n    sd1 = p$sd_therapist,\n    sd2 = p$sd_therapist\n)\n\n0.6547209 with absolute error &lt; 1.6e-05\n\n# cohen's d\n2 * pnorm(\n    -abs(cohensd) / 2,\n    sd = p$sd_therapist / tot_sd\n)\n\n[1] 0.6547208\n\nICC &lt;- p$sd_therapist^2 / (p$sd_therapist^2 + p$sd_error^2)\n2 * pnorm(\n    -abs(cohensd) / 2,\n    sd = sqrt(ICC)\n)\n\n[1] 0.6547208\n\n\n\n\nPlot Overlap\nFigure 1 visualizes the overlapping therapist effect distributions.\n\nSD &lt;- sqrt(0.05)\nmean1 &lt;- 0.2\n# create x axis\nx_min &lt;- 0 - 3 * SD\nx_max &lt;- mean1 + 3 * SD\nx &lt;- seq(x_min, x_max, length.out = 2e4)\ndf_control &lt;- rbind(\n    data.frame(\"x\" = x_min, \"y\" = 0),\n    data.frame(\"x\" = x, \"y\" = dnorm(x, 0, SD)),\n    data.frame(\"x\" = x_max, \"y\" = 0)\n)\ndf_tx &lt;- rbind(\n    data.frame(\"x\" = x_min, \"y\" = 0),\n    data.frame(\"x\" = x, \"y\" = dnorm(x, mean1, SD)),\n    data.frame(\"x\" = x_max, \"y\" = 0)\n)\npoly_overlap &lt;- data.frame(\n    \"x\" = df_control$x,\n    \"y\" = pmin(df_control$y, df_tx$y)\n)\n# colors\noverlap_fill &lt;- \"#2980b9\"\nu3_fill &lt;- \"#3498db\"\ncontrol_fill &lt;- \"#7f8c8d\"\ntreatment_fill &lt;- \"#2c3e50\"\np0 &lt;- ggplot(\n    df_tx,\n    aes(\n        x,\n        y,\n        fill = \"treatment\",\n    )\n) +\n    # fill treatment group\n    geom_polygon(\n        linewidth = 1,\n    ) +\n    # fill control group\n    geom_polygon(\n        data = df_control,\n        aes(\n            fill = \"control\"\n        ),\n        linewidth = 1\n    ) +\n    # overlap\n    geom_polygon(\n        data = poly_overlap,\n        color = NA,\n        fill = overlap_fill,\n    ) +\n    # line treatment\n    geom_polygon(\n        linewidth = 1,\n        color = \"white\",\n        alpha = 0.5,\n        fill = NA\n    ) +\n    # line control\n    geom_polygon(\n        data = df_control,\n        linewidth = 1,\n        color = \"white\",\n        alpha = 0.5,\n        fill = NA\n    ) +\n    geom_vline(\n        xintercept = 0,\n        linetype = \"dotted\"\n    ) +\n    geom_vline(\n        xintercept = mean1,\n        linetype = \"dotted\"\n    ) +\n    annotate(\n        geom = \"text\",\n        label = \"Control\",\n        x = 0,\n        y = dnorm(0, 0, SD) * 1.1\n    ) +\n    annotate(\n        geom = \"text\",\n        label = \"Treatment\",\n        x = mean1,\n        y = dnorm(mean1, mean1, SD) * 1.1\n    ) +\n    scale_color_manual(\n        values = c(\n            \"control\" = control_fill,\n            \"treatment\" = treatment_fill\n        )\n    ) +\n    scale_fill_manual(\n        values = c(\n            \"control\" = control_fill,\n            \"treatment\" = treatment_fill\n        )\n    ) +\n    labs(x = \"Therapist effects\", y = NULL) +\n    theme_minimal() +\n    theme(\n        legend.position = \"none\",\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.y = element_blank(),\n        axis.text.y = element_blank()\n    )\np0\nggsave(\"figures/fig_overlap.svg\", width = 8, height = 3)\n\n\n\n\nFigure 1: The proportion of therapists from each treatment group with overlapping effects.\n\n\n\n\n\n\nCohen’s U_3\nCohen’s U_3 can be calculated using the examples below, and several equivalent parameterizations are shown, using both standardized and raw effect sizes.\n\n# standardize using therapist SD\ncohensd &lt;- 0.2\ntot_sd &lt;- sqrt(p$sd_therapist^2 + p$sd_error^2)\nATE &lt;- cohensd * tot_sd\n# standardize using therapist SD\nz &lt;- ATE / p$sd_therapist\npnorm(z)\n\n[1] 0.8144533\n\n# unstandardized effect\npnorm(ATE, sd = p$sd_therapist)\n\n[1] 0.8144533\n\n# cohen's d parameterization\npnorm(\n    cohensd,\n    sd = p$sd_therapist / tot_sd\n)\n\n[1] 0.8144533\n\nICC &lt;- p$sd_therapist^2 / (p$sd_therapist^2 + p$sd_error^2)\npnorm(\n    cohensd, \n    sd = sqrt(ICC)\n)\n\n[1] 0.8144533\n\n\n\n\nPlot Cohen’s U_3\nFigure 2 visualizes Cohen’s U_3.\n\nSD &lt;- sqrt(0.05)\nES &lt;- 0.2\nmean1 &lt;- ES\n# create x axis\nx_min &lt;- 0 - 3 * SD\nx_max &lt;- mean1 + 3 * SD\nx &lt;- seq(x_min, x_max, length.out = 2e4)\ndf_control &lt;- rbind(\n    data.frame(\"x\" = x_min, \"y\" = 0),\n    data.frame(\"x\" = x, \"y\" = dnorm(x, 0, SD)),\n    data.frame(\"x\" = x_max, \"y\" = 0)\n)\ndf_tx &lt;- rbind(\n    data.frame(\"x\" = x_min, \"y\" = 0),\n    data.frame(\"x\" = x, \"y\" = dnorm(x, mean1, SD)),\n    data.frame(\"x\" = x_max, \"y\" = 0)\n)\npoly_u3 &lt;- rbind(\n    data.frame(\"x\" = x_min, \"y\" = 0),\n    poly_overlap[poly_overlap$x &lt;= 0, ],\n    data.frame(\"x\" = 0, \"y\" = 0)\n)\n# colors\noverlap_fill &lt;- \"#2980b9\"\ntreatment_fill &lt;- \"#3498db\"\ncontrol_fill &lt;- \"#7f8c8d\"\nu3_fill &lt;- \"#2c3e50\"\n# plot\np0 &lt;- ggplot(\n    df_control,\n    aes(\n        x,\n        y,\n        fill = \"control\"\n    )\n) +\n    # fill control group\n    geom_polygon(\n        linewidth = 1,\n    ) +\n    # fill treatment group\n    geom_polygon(\n        data = df_tx,\n        aes(\n            fill = \"treatment\"\n        ),\n        linewidth = 1\n    ) +\n    # overlap\n    geom_polygon(\n        data = poly_u3,\n        color = NA,\n        fill = u3_fill\n    ) +\n    # line control\n    geom_polygon(\n        linewidth = 1,\n        color = \"white\",\n        alpha = 0.5,\n        fill = NA\n    ) +\n    # line treatment\n    geom_polygon(\n        data = df_tx,\n        linewidth = 1,\n        color = \"white\",\n        alpha = 0.5,\n        fill = NA\n    ) +\n    geom_vline(\n        xintercept = 0, \n        linetype = \"dotted\"\n    ) +\n    geom_vline(\n        xintercept = mean1,\n        linetype = \"dotted\"\n    ) +\n    annotate(\n        geom = \"text\", \n        label = \"Control\", \n        x = 0, \n        y = dnorm(0, 0, SD) * 1.1\n    ) +\n    annotate(\n        geom = \"text\", \n        label = \"Treatment\", \n        x = mean1, \n        y = dnorm(mean1, mean1, SD) * 1.1\n    ) +\n    scale_color_manual(\n        values = c(\n            \"control\" = control_fill,\n            \"treatment\" = treatment_fill\n        )\n    ) +\n    scale_fill_manual(\n        values = c(\n            \"control\" = control_fill,\n            \"treatment\" = treatment_fill\n        )\n    ) +\n    labs(x = \"Therapist effects\", y = NULL) +\n    theme_minimal() +\n    theme(\n        legend.position = \"none\",\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.y = element_blank(),\n        axis.text.y = element_blank()\n    )\np0\nggsave(\"figures/fig_u3.svg\", width = 8, height = 3)\n\n\n\n\nFigure 2: A visualization of Cohen’s U3, the proportion of the therapists in the treatment group with causal effects above the average therapist in the control group\n\n\n\n\n\n\nProbability of Superiority\nThe probability of superiority can be calculated using the examples below, and several equivalent parameterizations are shown, using both standardized and raw effect sizes.\n\ncohensd &lt;- 0.2\ntot_sd &lt;- sqrt(p$sd_therapist^2 + p$sd_error^2)\nATE &lt;- cohensd * tot_sd\nz &lt;- ATE / p$sd_therapist\n# standardize using therapist SD\npnorm(z / sqrt(2))\n\n[1] 0.7364554\n\n# raw ES\npnorm(ATE / sqrt(2), sd = p$sd_therapist)\n\n[1] 0.7364554\n\n# cohen's d\nICC &lt;- p$sd_therapist^2/(p$sd_therapist^2 + p$sd_error^2)\npnorm(\n    cohensd / sqrt(2),\n    sd = p$sd_therapist / tot_sd\n)\n\n[1] 0.7364554\n\npnorm(\n    cohensd / sqrt(2),\n    sd = sqrt(ICC)\n)\n\n[1] 0.7364554\n\n# using simulation\nn &lt;- 1e5\ncc &lt;- rnorm(n, 0, p$sd_therapist)\ntx &lt;- rnorm(n, ATE, p$sd_therapist)\nmean(tx &gt; cc)\n\n[1] 0.73701\n\n\n\n\nTable\nTable 4 show the overlap measures for a range of treatment effects and ICCs. \\sigma_e^2 is constant, so only the treatment and therapist effects are varied.\n\nicc &lt;- c(0.01, 0.05, 0.1, 0.2)\nd &lt;- c(0.2, 0.5, 0.8)\nsigma_error2 &lt;- 1\nsigma_u2 &lt;- get_therapist_sd_from_icc(icc, sigma_error2)^2\ngrid &lt;- expand_grid(d, sigma_u2)\ngrid &lt;- grid %&gt;%\n    mutate(\n        sigma_error2,\n        icc = sigma_u2 / (sigma_u2 + sigma_error2),\n        ate = d * sqrt((sigma_u2 + sigma_error2))\n    )\nmap2_dfr(\n    grid$d,\n    grid$icc,\n    function(d, icc) {\n        data.frame(\n            d = d, \n            icc = icc, \n            overlap = 2 * pnorm(-abs(d) / 2, sd = sqrt(icc)),\n            u3 = pnorm(d, sd = sqrt(icc)),\n            prob_superiority = pnorm(d / sqrt(2), sd = sqrt(icc))\n        )\n        \n    }\n) %&gt;% \nmutate(\n    overlap = round(overlap * 100, 0),\n    u3 = round(u3 * 100, 0),\n    prob_superiority = round(prob_superiority, 2),\n) %&gt;% \nleft_join(\n    select(grid, ate, d, icc, sigma_error2, sigma_u2),\n    by = c(\"d\", \"icc\")\n) %&gt;% \narrange(d, icc) %&gt;% \nrename(\n    \"Overlap (%)\" = overlap,\n    \"$U_3$ (%)\" = u3,\n    \"Pr. superiority\" = prob_superiority,\n    \"Cohen's *d*\" = d,\n    \"ICC\" = icc,\n    \"ATE\" = ate,\n    \"$\\\\sigma_e^2$\" = sigma_error2,\n    \"$\\\\sigma_u^2$\" = sigma_u2\n) %&gt;% \nkable(digits = 2)\n\n\n\nTable 4: Interpreting Therapist Effects Using Overlap Measures\n\n\n\n\n\n\n\n\n\n\n\n\nCohen’s d\nICC\nOverlap (%)\nU_3 (%)\nPr. superiority\nATE\n\\sigma_e^2\n\\sigma_u^2\n\n\n\n\n0.2\n0.01\n32\n98\n0.92\n0.20\n1\n0.01\n\n\n0.2\n0.05\n65\n81\n0.74\n0.21\n1\n0.05\n\n\n0.2\n0.10\n75\n74\n0.67\n0.21\n1\n0.11\n\n\n0.2\n0.20\n82\n67\n0.62\n0.22\n1\n0.25\n\n\n0.5\n0.01\n1\n100\n1.00\n0.50\n1\n0.01\n\n\n0.5\n0.05\n26\n99\n0.94\n0.51\n1\n0.05\n\n\n0.5\n0.10\n43\n94\n0.87\n0.53\n1\n0.11\n\n\n0.5\n0.20\n58\n87\n0.79\n0.56\n1\n0.25\n\n\n0.8\n0.01\n0\n100\n1.00\n0.80\n1\n0.01\n\n\n0.8\n0.05\n7\n100\n0.99\n0.82\n1\n0.05\n\n\n0.8\n0.10\n21\n99\n0.96\n0.84\n1\n0.11\n\n\n0.8\n0.20\n37\n96\n0.90\n0.89\n1\n0.25"
  },
  {
    "objectID": "index.html#confidence-intervals",
    "href": "index.html#confidence-intervals",
    "title": "A Causal Inference Perspective on Therapist Effects—Online Supplement",
    "section": "Confidence Intervals",
    "text": "Confidence Intervals\nWe will compute confidence intervals for the therapist effects measures to draw inferences about the population values. The simplest way to construct CIs for the ICCs, and overlap measures is to use parametric bootstrapping or a Bayesian model. I will provide an example using Bayesian methods, but a parametric bootstrap using lme4::bootMer would look very similar.\nFor this example, I will increase the sample size to 40 therapists per treatment group. Robust inference regarding therapist effects will require large sample sizes. Moreover, this is the required sample size to reach 80% power for d = 0.2.\n\np$sd_therapist_confounding &lt;- 0\ntot_sd &lt;- sqrt(\n    p$sd_error^2 + p$sd_therapist^2\n)\np$ATE &lt;- 0.2 * tot_sd\np$n2 &lt;- 40\nfile_path &lt;- \"tmp/ci_dataset.rds\"\nif (file.exists(file_path)) {\n    d &lt;- read_rds(file = file_path)\n} else {\n    d &lt;- simulate_data(p)\n    write_rds(\n        d,\n        file = file_path,\n        compress = \"gz\"\n    )\n}\n\nThe Bayesian multilevel model is fit using brms.\n\nfit_tmp &lt;- brm(\n    y_random ~ Z + (1 | therapist_random), \n    data = d,\n    file = \"tmp/fit_brms\",\n    refresh = 0\n)\n\n\nfit_tmp\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: y_random ~ Z + (1 | therapist_random) \n   Data: d (Number of observations: 1600) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nGroup-Level Effects: \n~therapist_random (Number of levels: 80) \n              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsd(Intercept)     0.42      0.06     0.32     0.54 1.00     1436     2334\n\nPopulation-Level Effects: \n          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept    10.05      0.09     9.88    10.22 1.00     2370     2611\nZ             0.38      0.12     0.13     0.62 1.00     2700     2869\n\nFamily Specific Parameters: \n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     1.50      0.03     1.45     1.56 1.00     6942     3253\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nWe then calculate all effect sizes and construct confidence intervals using the 2.5th and 97.5th percentiles of the posterior distributions, as shown in Table 5.\n\n#' Calculate various posterior therapist effects measures\n#' \n#' @param the fitted brms model\ncalc_overlap_bayes &lt;- function(fit) {\n    draws &lt;- as_draws_df(fit)[, 1:4]\n    draws %&gt;%\n        mutate(\n            sd_u = sd_therapist_random__Intercept,\n            z = b_Z / sd_u,\n            overlap = 2 * pnorm(-abs(z) / 2),\n            u3 = pnorm(z),\n            PS = pnorm(z / sqrt(2)),\n            sd_e = sigma,\n            icc = sd_u^2 / (sd_u^2 + sd_e^2)\n        ) %&gt;%\n        select(\n            tx = b_Z,\n            sdu = sd_u,\n            overlap,\n            u3,\n            PS,\n            sde = sd_e,\n            icc\n        ) %&gt;%\n        summarize_all(\n            list(\n                \"mean\" = mean,\n                \"median\" = median,\n                \"lwr\" = ~ quantile(.x, 0.025),\n                \"upr\" = ~ quantile(.x, 0.975)\n            )\n        ) %&gt;%\n        pivot_longer(\n            everything(),\n            names_to = c(\".param\", \".value\"),\n            names_pattern = \"(.*)_(.*)\"\n        ) \n}\n\n\ncalc_overlap_bayes(fit_tmp) %&gt;% \n    rename(parameter = .param) %&gt;% \n    mutate(\n        parameter = case_when(\n            parameter == \"PS\" ~ \"Prob. superiority\",\n            parameter == \"icc\" ~ \"ICC\",\n            parameter == \"overlap\" ~ \"Overlap\",\n            parameter == \"sde\" ~ \"Error SD, $\\\\sigma_e$\",\n            parameter == \"sdu\" ~ \"Therapist SD, $\\\\sigma_u$\",\n            parameter == \"tx\" ~ \"Treatment effect, $\\\\delta_1$\",\n            parameter == \"u3\" ~ \"Cohen's *U*&lt;sub&gt;3&lt;/sub&gt;\",\n            TRUE ~ parameter\n        ),\n        ci = paste0(\"[\", round(lwr, 2), \", \", round(upr, 2), \"]\")\n    ) %&gt;% \n    select(\n        \"Parameter\" = parameter,\n        \"Est. (mean)\" = mean,\n        \"Est. (median)\" = median,\n        \"95% CI\" = ci\n    ) %&gt;% \n    kable(digits = 2)\n\n\n\nTable 5: 95% Confidence Intervals\n\n\n\n\n\n\n\n\nParameter\nEst. (mean)\nEst. (median)\n95% CI\n\n\n\n\nTreatment effect, \\delta_1\n0.38\n0.39\n[0.13, 0.62]\n\n\nTherapist SD, \\sigma_u\n0.42\n0.42\n[0.32, 0.54]\n\n\nOverlap\n0.65\n0.65\n[0.44, 0.88]\n\n\nCohen’s U3\n0.81\n0.82\n[0.62, 0.94]\n\n\nProb. superiority\n0.74\n0.74\n[0.59, 0.86]\n\n\nError SD, \\sigma_e\n1.50\n1.50\n[1.45, 1.56]\n\n\nICC\n0.07\n0.07\n[0.04, 0.12]\n\n\n\n\n\n\n\nSimulation - Check Coverage\nWe will run a small simulation to check the frequentist coverage of the computed confidence intervals, i.e., do they include the true value 95% of the time?\n\n#' Perform one confidence interval simulation\n#' \n#' @param i an integer representing the current simulation index\n#' @p a powerlmm study parameter object\n#' @fit_tmp a brmsfit object\nbayes_sim &lt;- function(i, p, fit_tmp) {\n    fit_b &lt;- update(fit_tmp, newdata = simulate_data(p))\n    fit_b %&gt;% \n        calc_overlap_bayes() %&gt;%\n        mutate(sim = i)\n}\n# check for cached simulation\nfile_path &lt;- \"tmp/simulation_overlap_bayes.rds\"\nif (file.exists(file_path)) {\n    res_b &lt;- read_rds(file = file_path)\n} else {\n    MAX_CORES &lt;- as.numeric(Sys.getenv(\"MAX_CORES\"))\n    N_SIM &lt;- as.numeric(Sys.getenv(\"N_SIM_CI\"))\n    cl &lt;- parallel::makeCluster(MAX_CORES)\n    parallel::clusterEvalQ(\n        cl,\n        expr = {\n            library(powerlmm)\n            library(brms)\n            library(dplyr)\n            library(tidyr)\n        }\n    )\n    clusterExport(\n        cl,\n        c(\n            \"solve_for_mean\",\n            \"get_therapist_sd_from_icc\",\n            \"calc_overlap_bayes\"\n        )\n    )\n    res_b &lt;- parallel::parLapply(\n        cl,\n        seq_len(ifelse(is.na(N_SIM), 1000, N_SIM)),\n        bayes_sim,\n        p = p,\n        fit_tmp = fit_tmp\n    )\n    stopCluster(cl)\n    res_b &lt;- res_b %&gt;% do.call(rbind, .)\n    write_rds(\n        res_b,\n        file = file_path,\n        compress = \"gz\"\n    )\n}\n\nLet’s summarize the results from the 1000 simulations.\n\nres_b %&gt;%\n    rename(parameter = .param) %&gt;%\n    mutate(\n        theta = case_when(\n            parameter == \"tx\" ~ p$ATE,\n            parameter == \"sdu\" ~ p$sd_therapist,\n            parameter == \"sde\" ~ p$sd_error,\n            parameter == \"icc\" ~ p$sd_therapist^2 / (p$sd_therapist^2 + p$sd_error^2),\n            parameter == \"overlap\" ~ 2 * pnorm(-abs(p$ATE / p$sd_therapist) / 2),\n            parameter == \"u3\" ~ pnorm(p$ATE / p$sd_therapist),\n            parameter == \"PS\" ~ pnorm((p$ATE / p$sd_therapist) / sqrt(2)),\n        ),\n        coverage = lwr &lt; theta & upr &gt; theta\n    ) %&gt;%\n    group_by(parameter) %&gt;%\n    summarize(\n        M_est = mean(mean),\n        Med_est = mean(median),\n        sd_mean = sd(mean), \n        coverage = mean(coverage),\n        theta = unique(theta),\n        lwr = quantile(mean, 0.025),\n        upr = quantile(mean, 0.975)\n    ) %&gt;%\n    mutate(\n        parameter = case_when(\n            parameter == \"PS\" ~ \"Prob. superiority\",\n            parameter == \"icc\" ~ \"ICC\",\n            parameter == \"overlap\" ~ \"Overlap\",\n            parameter == \"sde\" ~ \"Error SD, $\\\\sigma_e$\",\n            parameter == \"sdu\" ~ \"Therapist SD, $\\\\sigma_u$\",\n            parameter == \"tx\" ~ \"Treatment effect, $\\\\delta_1$\",\n            parameter == \"u3\" ~ \"Cohen's *U*&lt;sub&gt;3&lt;/sub&gt;\",\n            TRUE ~ parameter\n        ),\n        rel_bias = (M_est - theta) / theta,\n        rel_bias_med = (Med_est - theta) / theta\n    ) %&gt;% \n    select(\n        Parameter = parameter,\n        \"Estimate\" = M_est,\n        \"SD(Est.)\" = sd_mean,\n        \"Coverage\" = coverage,\n        \"True\" = theta, \n        \"2.5th\" = lwr,\n        \"97.5th\" = upr,\n        \"Rel. bias (Est.)\" = rel_bias,\n    ) %&gt;% \n    kable(digits = 2)\n\n\n\nTable 6: Simulation results (therapist effects)\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\nEstimate\nSD(Est.)\nCoverage\nTrue\n2.5th\n97.5th\nRel. bias (Est.)\n\n\n\n\nProb. superiority\n0.74\n0.08\n0.95\n0.74\n0.58\n0.88\n0.00\n\n\nICC\n0.05\n0.02\n0.94\n0.05\n0.02\n0.08\n0.03\n\n\nOverlap\n0.64\n0.13\n0.95\n0.65\n0.38\n0.86\n-0.03\n\n\nError SD, \\sigma_e\n1.50\n0.03\n0.95\n1.50\n1.45\n1.56\n0.00\n\n\nTherapist SD, \\sigma_u\n0.34\n0.06\n0.95\n0.34\n0.22\n0.45\n-0.01\n\n\nTreatment effect, \\delta_1\n0.31\n0.11\n0.95\n0.31\n0.10\n0.52\n0.01\n\n\nCohen’s U3\n0.80\n0.09\n0.95\n0.81\n0.61\n0.95\n-0.01\n\n\n\n\n\n\nTable 6 shows that all effects are unbiased and that the 95% CIs have nominal coverage. Posterior means are used as estimates; relative bias is slightly lower for posterior medians. It should be noted that the estimates will likely be biased with smaller sample sizes.\nTable 7 shows the power for the treatment effect and the probability of superiority.\n\nres_b %&gt;% \n    filter(.param == \"tx\") %&gt;% \n    group_by(.param) %&gt;% \n    summarize(power = 1 - mean(lwr &lt;= 0 & upr &gt;= 0)) %&gt;% \n    rbind(\n    res_b %&gt;% \n        filter(.param == \"PS\") %&gt;% \n        group_by(.param) %&gt;% \n        summarise(power = 1 - mean(lwr &lt;= 0.5 & upr &gt;= 0.5))\n    ) %&gt;% \n    mutate(\n        .param = case_when(\n            .param  == \"PS\" ~ \"Prob. superiority\",\n            .param  == \"tx\" ~ \"Treatment effect, $\\\\delta_1$\"\n        )\n    ) %&gt;% \n    rename(\n        \"Parameter\" = .param,\n        \"Power\" = power\n    ) %&gt;% \n    kable(digits = 2)\n\n\n\nTable 7: Simulation-based Power\n\n\nParameter\nPower\n\n\n\n\nTreatment effect, \\delta_1\n0.81\n\n\nProb. superiority\n0.81"
  }
]